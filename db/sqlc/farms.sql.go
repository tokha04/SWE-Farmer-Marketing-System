// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: farms.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFarm = `-- name: CreateFarm :one
INSERT INTO farms (
  farmer_id,
  address,
  size,
  government_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, farmer_id, address, size, government_id
`

type CreateFarmParams struct {
	FarmerID     pgtype.Int4
	Address      pgtype.Text
	Size         pgtype.Float8
	GovernmentID pgtype.Int4
}

func (q *Queries) CreateFarm(ctx context.Context, arg CreateFarmParams) (Farm, error) {
	row := q.db.QueryRow(ctx, createFarm,
		arg.FarmerID,
		arg.Address,
		arg.Size,
		arg.GovernmentID,
	)
	var i Farm
	err := row.Scan(
		&i.ID,
		&i.FarmerID,
		&i.Address,
		&i.Size,
		&i.GovernmentID,
	)
	return i, err
}

const deleteFarm = `-- name: DeleteFarm :exec
DELETE FROM farms
WHERE id = $1
`

func (q *Queries) DeleteFarm(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFarm, id)
	return err
}

const getFarm = `-- name: GetFarm :one
SELECT id, farmer_id, address, size, government_id FROM farms
WHERE farmer_id = $1
`

func (q *Queries) GetFarm(ctx context.Context, farmerID pgtype.Int4) (Farm, error) {
	row := q.db.QueryRow(ctx, getFarm, farmerID)
	var i Farm
	err := row.Scan(
		&i.ID,
		&i.FarmerID,
		&i.Address,
		&i.Size,
		&i.GovernmentID,
	)
	return i, err
}

const listFarms = `-- name: ListFarms :many
SELECT id, farmer_id, address, size, government_id FROM farms
WHERE farmer_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListFarmsParams struct {
	FarmerID pgtype.Int4
	Limit    int32
	Offset   int32
}

func (q *Queries) ListFarms(ctx context.Context, arg ListFarmsParams) ([]Farm, error) {
	rows, err := q.db.Query(ctx, listFarms, arg.FarmerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Farm
	for rows.Next() {
		var i Farm
		if err := rows.Scan(
			&i.ID,
			&i.FarmerID,
			&i.Address,
			&i.Size,
			&i.GovernmentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFarm = `-- name: UpdateFarm :one
UPDATE farms SET
    address = COALESCE(NULLIF($2, ''), address),
    size = COALESCE(NULLIF($3, ''), size),
    government_id = COALESCE(NULLIF($4, ''), government_id)
WHERE id = $1
RETURNING id, farmer_id, address, size, government_id
`

type UpdateFarmParams struct {
	ID      int32
	Column2 interface{}
	Column3 interface{}
	Column4 interface{}
}

func (q *Queries) UpdateFarm(ctx context.Context, arg UpdateFarmParams) (Farm, error) {
	row := q.db.QueryRow(ctx, updateFarm,
		arg.ID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	var i Farm
	err := row.Scan(
		&i.ID,
		&i.FarmerID,
		&i.Address,
		&i.Size,
		&i.GovernmentID,
	)
	return i, err
}
